package kotlin.collections;

import io.reactivex.annotations.SchedulerSupport;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.RandomAccess;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.comparisons.ComparisonsKt;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1;
import kotlin.internal.HidesMembers;
import kotlin.internal.InlineOnly;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import kotlin.ranges.IntRange;
import kotlin.ranges.RangesKt;
import kotlin.sequences.Sequence;
import kotlin.sequences.SequencesKt;
import kotlin.text.StringsKt;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/* JADX INFO: Access modifiers changed from: package-private */
/* compiled from: _Collections.kt */
@Metadata(bv = {1, 0, 2}, d1 = {"\u0000â\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u001c\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\u0005\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001e\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u0000\n\u0002\b\u0013\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\u0002\n\u0002\b\u0006\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\"\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0011\n\u0002\b\u001a\n\u0002\u0018\u0002\n\u0002\b\u0017\n\u0002\u0010\u0018\n\u0000\n\u0002\u0010\u0012\n\u0000\n\u0002\u0010\u0019\n\u0002\u0010\f\n\u0002\b\u0002\n\u0002\u0010\u0013\n\u0000\n\u0002\u0010\u0014\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0015\n\u0002\b\u0002\n\u0002\u0010\u0016\n\u0002\b\u0002\n\u0002\u0010#\n\u0002\b\u0002\n\u0002\u0010\u0017\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0006\u001a-\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001f\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0087\b\u001a\u001c\u0010\b\u001a\b\u0012\u0004\u0012\u0002H\u00020\t\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aQ\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b\u001a?\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001aY\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001aZ\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001at\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b¢\u0006\u0002\u0010\u0018\u001al\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020\u001c0\u0003H\u0007¢\u0006\u0002\b\u001d\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020\u001b0\u0003H\u0007¢\u0006\u0002\b\u001e\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0002\b \u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020!0\u0003H\u0007¢\u0006\u0002\b\"\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020#0\u0003H\u0007¢\u0006\u0002\b$\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020%0\u0003H\u0007¢\u0006\u0002\b&\u001a,\u0010'\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(0(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u00020!H\u0007\u001aF\u0010'\u001a\b\u0012\u0004\u0012\u0002H*0(\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u00020!2\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(\u0012\u0004\u0012\u0002H*0\u0005H\u0007\u001a\u001e\u0010+\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(H\u0087\n¢\u0006\u0002\u0010,\u001a\u001e\u0010-\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(H\u0087\n¢\u0006\u0002\u0010,\u001a\u001e\u0010.\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(H\u0087\n¢\u0006\u0002\u0010,\u001a\u001e\u0010/\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(H\u0087\n¢\u0006\u0002\u0010,\u001a\u001e\u00100\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(H\u0087\n¢\u0006\u0002\u0010,\u001a+\u00101\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b2*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00103\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0002\u00104\u001a\u0019\u00105\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000206H\u0087\b\u001a\u0016\u00105\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u00105\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u001c\u00107\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a9\u00108\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00109\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a$\u0010:\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010;\u001a\u00020!\u001a$\u0010<\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0006\u0010;\u001a\u00020!\u001a3\u0010=\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a3\u0010>\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a#\u0010?\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010@\u001a\u00020!¢\u0006\u0002\u0010A\u001a&\u0010?\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0006\u0010@\u001a\u00020!H\u0087\b¢\u0006\u0002\u0010B\u001a7\u0010C\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010@\u001a\u00020!2\u0012\u0010D\u001a\u000e\u0012\u0004\u0012\u00020!\u0012\u0004\u0012\u0002H\u00020\u0005¢\u0006\u0002\u0010E\u001a:\u0010C\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0006\u0010@\u001a\u00020!2\u0012\u0010D\u001a\u000e\u0012\u0004\u0012\u00020!\u0012\u0004\u0012\u0002H\u00020\u0005H\u0087\b¢\u0006\u0002\u0010F\u001a%\u0010G\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010@\u001a\u00020!¢\u0006\u0002\u0010A\u001a(\u0010G\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0006\u0010@\u001a\u00020!H\u0087\b¢\u0006\u0002\u0010B\u001a3\u0010H\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001aH\u0010I\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110!¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(@\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010JH\u0086\b\u001aa\u0010M\u001a\u0002HN\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HN2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110!¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(@\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010JH\u0086\b¢\u0006\u0002\u0010P\u001a$\u0010Q\u001a\r\u0012\t\u0012\u0007H*¢\u0006\u0002\bR0(\"\u0006\b\u0000\u0010*\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\u0086\b\u001a*\u0010Q\u001a\b\u0012\u0004\u0012\u0002H*0(\"\u0004\b\u0000\u0010**\u0006\u0012\u0002\b\u00030\u00032\f\u0010S\u001a\b\u0012\u0004\u0012\u0002H*0TH\u0007\u001a8\u0010U\u001a\u0002HN\"\u0006\b\u0000\u0010*\u0018\u0001\"\u0010\b\u0001\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H*0O*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HNH\u0086\b¢\u0006\u0002\u0010V\u001aC\u0010U\u001a\u0002HN\"\u0010\b\u0000\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H*0O\"\u0004\b\u0001\u0010**\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002HN2\f\u0010S\u001a\b\u0012\u0004\u0012\u0002H*0TH\u0007¢\u0006\u0002\u0010W\u001a3\u0010X\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\"\u0010Y\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010[\u001a\u0002HN\"\u0010\b\u0000\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020O\"\b\b\u0001\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HN¢\u0006\u0002\u0010V\u001aL\u0010\\\u001a\u0002HN\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HN2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010]\u001aL\u0010^\u001a\u0002HN\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HN2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010]\u001a4\u0010_\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010`\u001a4\u0010a\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010`\u001a4\u0010a\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0087\b¢\u0006\u0002\u0010b\u001a\u001b\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a2\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001b\u0010c\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(¢\u0006\u0002\u0010,\u001a\u001d\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a4\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001d\u0010e\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(¢\u0006\u0002\u0010,\u001a?\u0010f\u001a\b\u0012\u0004\u0012\u0002H*0(\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H*0\u00030\u0005H\u0086\b\u001aX\u0010g\u001a\u0002HN\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010*\"\u0010\b\u0002\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H*0O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HN2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002H*0\u00030\u0005H\u0086\b¢\u0006\u0002\u0010]\u001aU\u0010h\u001a\u0002H*\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H*2'\u0010j\u001a#\u0012\u0013\u0012\u0011H*¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0JH\u0086\b¢\u0006\u0002\u0010l\u001aj\u0010m\u001a\u0002H*\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010i\u001a\u0002H*2<\u0010j\u001a8\u0012\u0013\u0012\u00110!¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(@\u0012\u0013\u0012\u0011H*¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0nH\u0086\b¢\u0006\u0002\u0010o\u001aU\u0010p\u001a\u0002H*\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020(2\u0006\u0010i\u001a\u0002H*2'\u0010j\u001a#\u0012\u0004\u0012\u0002H\u0002\u0012\u0013\u0012\u0011H*¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H*0JH\u0086\b¢\u0006\u0002\u0010q\u001aj\u0010r\u001a\u0002H*\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020(2\u0006\u0010i\u001a\u0002H*2<\u0010j\u001a8\u0012\u0013\u0012\u00110!¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(@\u0012\u0004\u0012\u0002H\u0002\u0012\u0013\u0012\u0011H*¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H*0nH\u0086\b¢\u0006\u0002\u0010s\u001a-\u0010t\u001a\u00020u\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010v\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0\u0005H\u0087\b\u001aB\u0010w\u001a\u00020u\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010v\u001a#\u0012\u0013\u0012\u00110!¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(@\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0JH\u0086\b\u001a:\u0010x\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0006\u0010@\u001a\u00020!2\u0012\u0010D\u001a\u000e\u0012\u0004\u0012\u00020!\u0012\u0004\u0012\u0002H\u00020\u0005H\u0087\b¢\u0006\u0002\u0010F\u001a%\u0010y\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0006\u0010@\u001a\u00020!¢\u0006\u0002\u0010B\u001aE\u0010z\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b\u001a_\u0010z\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0(0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b\u001a^\u0010{\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020|0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0086\b¢\u0006\u0002\u0010\u0017\u001ax\u0010{\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0|0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\u0086\b¢\u0006\u0002\u0010\u0018\u001aA\u0010}\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0~\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\u0087\b\u001a)\u0010\u007f\u001a\u00020!\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b2*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00103\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0080\u0001\u001a+\u0010\u007f\u001a\u00020!\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b2*\b\u0012\u0004\u0012\u0002H\u00020(2\u0006\u00103\u001a\u0002H\u0002H\u0007¢\u0006\u0003\u0010\u0081\u0001\u001a.\u0010\u0082\u0001\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0082\u0001\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0083\u0001\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010\u0083\u0001\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a0\u0010\u0084\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001a\u008d\u0001\u0010\u0087\u0001\u001a\u0003H\u0088\u0001\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010\u0088\u0001*\b0\u0089\u0001j\u0003`\u008a\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\u0010\u008b\u0001\u001a\u0003H\u0088\u00012\n\b\u0002\u0010\u008c\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008e\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008f\u0001\u001a\u00030\u008d\u00012\t\b\u0002\u0010\u0090\u0001\u001a\u00020!2\n\b\u0002\u0010\u0091\u0001\u001a\u00030\u008d\u00012\u0017\b\u0002\u0010\u000e\u001a\u0011\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u008d\u0001\u0018\u00010\u0005¢\u0006\u0003\u0010\u0092\u0001\u001al\u0010\u0093\u0001\u001a\u00030\u0094\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\n\b\u0002\u0010\u008c\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008e\u0001\u001a\u00030\u008d\u00012\n\b\u0002\u0010\u008f\u0001\u001a\u00030\u008d\u00012\t\b\u0002\u0010\u0090\u0001\u001a\u00020!2\n\b\u0002\u0010\u0091\u0001\u001a\u00030\u008d\u00012\u0017\b\u0002\u0010\u000e\u001a\u0011\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u00030\u008d\u0001\u0018\u00010\u0005\u001a\u001c\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a3\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001c\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(¢\u0006\u0002\u0010,\u001a3\u0010\u0095\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010b\u001a*\u0010\u0096\u0001\u001a\u00020!\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b2*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00103\u001a\u0002H\u0002¢\u0006\u0003\u0010\u0080\u0001\u001a,\u0010\u0096\u0001\u001a\u00020!\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b2*\b\u0012\u0004\u0012\u0002H\u00020(2\u0006\u00103\u001a\u0002H\u0002H\u0007¢\u0006\u0003\u0010\u0081\u0001\u001a\u001e\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a5\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001e\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(¢\u0006\u0002\u0010,\u001a5\u0010\u0097\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010b\u001a:\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u0002H*0(\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0\u0005H\u0086\b\u001aO\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u0002H*0(\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110!¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(@\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0JH\u0086\b\u001aU\u0010\u009a\u0001\u001a\b\u0012\u0004\u0012\u0002H*0(\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010**\u00020Z*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110!¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(@\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0JH\u0086\b\u001an\u0010\u009b\u0001\u001a\u0002HN\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010**\u00020Z\"\u0010\b\u0002\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H*0O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HN2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110!¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(@\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0JH\u0086\b¢\u0006\u0002\u0010P\u001ah\u0010\u009c\u0001\u001a\u0002HN\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010*\"\u0010\b\u0002\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H*0O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HN2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110!¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(@\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0JH\u0086\b¢\u0006\u0002\u0010P\u001a@\u0010\u009d\u0001\u001a\b\u0012\u0004\u0012\u0002H*0(\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010**\u00020Z*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0\u0005H\u0086\b\u001aY\u0010\u009e\u0001\u001a\u0002HN\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010**\u00020Z\"\u0010\b\u0002\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H*0O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HN2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0\u0005H\u0086\b¢\u0006\u0002\u0010]\u001aS\u0010\u009f\u0001\u001a\u0002HN\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010*\"\u0010\b\u0002\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H*0O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HN2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0\u0005H\u0086\b¢\u0006\u0002\u0010]\u001a*\u0010 \u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010¢\u0001\u001a\u001b\u0010 \u0001\u001a\u0004\u0018\u00010\u001b*\b\u0012\u0004\u0012\u00020\u001b0\u0003H\u0007¢\u0006\u0003\u0010£\u0001\u001a\u001b\u0010 \u0001\u001a\u0004\u0018\u00010\u001f*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\u0010¤\u0001\u001aF\u0010¥\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010**\t\u0012\u0004\u0012\u0002H*0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00109\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a>\u0010¦\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010§\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¨\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`©\u0001¢\u0006\u0003\u0010ª\u0001\u001a*\u0010«\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010¢\u0001\u001a\u001b\u0010«\u0001\u001a\u0004\u0018\u00010\u001b*\b\u0012\u0004\u0012\u00020\u001b0\u0003H\u0007¢\u0006\u0003\u0010£\u0001\u001a\u001b\u0010«\u0001\u001a\u0004\u0018\u00010\u001f*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\u0010¤\u0001\u001aF\u0010¬\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010**\t\u0012\u0004\u0012\u0002H*0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00109\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a>\u0010\u00ad\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010§\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¨\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`©\u0001¢\u0006\u0003\u0010ª\u0001\u001a.\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00103\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010¯\u0001\u001a8\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010°\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020±\u0001H\u0086\u0002¢\u0006\u0003\u0010²\u0001\u001a/\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010®\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010³\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00103\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010¯\u0001\u001a\u0017\u0010´\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a.\u0010´\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a>\u0010µ\u0001\u001a\u0002HN\"\u0004\b\u0000\u0010\u0002\"\u000e\b\u0001\u0010N*\b\u0012\u0004\u0012\u0002H\u00020\u0003*\u0002HN2\u0012\u0010v\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u0\u0005H\u0087\b¢\u0006\u0003\u0010¶\u0001\u001aF\u0010·\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a.\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002062\u0006\u00103\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010¹\u0001\u001a8\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002062\u0010\u0010°\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020±\u0001H\u0086\u0002¢\u0006\u0003\u0010º\u0001\u001a/\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002062\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002062\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00103\u001a\u0002H\u0002H\u0086\u0002¢\u0006\u0003\u0010¯\u0001\u001a8\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010°\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020±\u0001H\u0086\u0002¢\u0006\u0003\u0010²\u0001\u001a/\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0002\u001a/\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010°\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\tH\u0086\u0002\u001a.\u0010»\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u0002062\u0006\u00103\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010¹\u0001\u001a.\u0010»\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00103\u001a\u0002H\u0002H\u0087\b¢\u0006\u0003\u0010¯\u0001\u001aX\u0010¼\u0001\u001a\u0003H½\u0001\"\u0005\b\u0000\u0010½\u0001\"\t\b\u0001\u0010\u0002*\u0003H½\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010j\u001a%\u0012\u0014\u0012\u0012H½\u0001¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H½\u00010JH\u0086\b¢\u0006\u0003\u0010¾\u0001\u001am\u0010¿\u0001\u001a\u0003H½\u0001\"\u0005\b\u0000\u0010½\u0001\"\t\b\u0001\u0010\u0002*\u0003H½\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010j\u001a:\u0012\u0013\u0012\u00110!¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(@\u0012\u0014\u0012\u0012H½\u0001¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(k\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H½\u00010nH\u0086\b¢\u0006\u0003\u0010À\u0001\u001aX\u0010Á\u0001\u001a\u0003H½\u0001\"\u0005\b\u0000\u0010½\u0001\"\t\b\u0001\u0010\u0002*\u0003H½\u0001*\b\u0012\u0004\u0012\u0002H\u00020(2)\u0010j\u001a%\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012H½\u0001¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(k\u0012\u0005\u0012\u0003H½\u00010JH\u0086\b¢\u0006\u0003\u0010Â\u0001\u001am\u0010Ã\u0001\u001a\u0003H½\u0001\"\u0005\b\u0000\u0010½\u0001\"\t\b\u0001\u0010\u0002*\u0003H½\u0001*\b\u0012\u0004\u0012\u0002H\u00020(2>\u0010j\u001a:\u0012\u0013\u0012\u00110!¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(@\u0012\u0004\u0012\u0002H\u0002\u0012\u0014\u0012\u0012H½\u0001¢\u0006\f\bK\u0012\b\bL\u0012\u0004\b\b(k\u0012\u0005\u0012\u0003H½\u00010nH\u0086\b¢\u0006\u0003\u0010Ä\u0001\u001a#\u0010Å\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a#\u0010Å\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\b\b\u0000\u0010\u0002*\u00020Z*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020(\u001a\u0017\u0010Æ\u0001\u001a\u00020u\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020|\u001a\u001d\u0010Ç\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001c\u0010È\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a3\u0010È\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001c\u0010È\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(¢\u0006\u0002\u0010,\u001a\u001e\u0010É\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010d\u001a5\u0010É\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b¢\u0006\u0002\u0010`\u001a\u001e\u0010É\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(¢\u0006\u0002\u0010,\u001a,\u0010Ê\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\r\u0010Ë\u0001\u001a\b\u0012\u0004\u0012\u00020!0\u0003\u001a'\u0010Ê\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\b\u0010Ë\u0001\u001a\u00030Ì\u0001\u001aC\u0010Í\u0001\u001a\u00020u\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010**\t\u0012\u0004\u0012\u0002H*0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020|2\u0016\b\u0004\u00109\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0\u0005H\u0086\b\u001aC\u0010Î\u0001\u001a\u00020u\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010**\t\u0012\u0004\u0012\u0002H*0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020|2\u0016\b\u0004\u00109\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0\u0005H\u0086\b\u001a\"\u0010Ï\u0001\u001a\u00020u\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020|\u001a(\u0010Ð\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aI\u0010Ñ\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010**\t\u0012\u0004\u0012\u0002H*0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00109\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0\u0005H\u0086\b\u001aI\u0010Ò\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010**\t\u0012\u0004\u0012\u0002H*0¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u00109\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001H*0\u0005H\u0086\b\u001a(\u0010Ó\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010Ô\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010§\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¨\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`©\u0001\u001a0\u0010Õ\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001a\u0019\u0010Ö\u0001\u001a\u00020!*\b\u0012\u0004\u0012\u00020\u001c0\u0003H\u0007¢\u0006\u0003\b×\u0001\u001a\u0019\u0010Ö\u0001\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020\u001b0\u0003H\u0007¢\u0006\u0003\bØ\u0001\u001a\u0019\u0010Ö\u0001\u001a\u00020\u001f*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\bÙ\u0001\u001a\u0019\u0010Ö\u0001\u001a\u00020!*\b\u0012\u0004\u0012\u00020!0\u0003H\u0007¢\u0006\u0003\bÚ\u0001\u001a\u0019\u0010Ö\u0001\u001a\u00020#*\b\u0012\u0004\u0012\u00020#0\u0003H\u0007¢\u0006\u0003\bÛ\u0001\u001a\u0019\u0010Ö\u0001\u001a\u00020!*\b\u0012\u0004\u0012\u00020%0\u0003H\u0007¢\u0006\u0003\bÜ\u0001\u001a.\u0010Ý\u0001\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00109\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020!0\u0005H\u0086\b\u001a.\u0010Þ\u0001\u001a\u00020\u001b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u00109\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001b0\u0005H\u0086\b\u001a%\u0010ß\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010;\u001a\u00020!\u001a%\u0010à\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0006\u0010;\u001a\u00020!\u001a4\u0010á\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020(2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a4\u0010â\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\u0086\b\u001a\u0012\u0010ã\u0001\u001a\u00030ä\u0001*\b\u0012\u0004\u0012\u00020\u000106\u001a\u0012\u0010å\u0001\u001a\u00030æ\u0001*\b\u0012\u0004\u0012\u00020\u001c06\u001a\u0013\u0010ç\u0001\u001a\u00030è\u0001*\t\u0012\u0005\u0012\u00030é\u000106\u001a6\u0010ê\u0001\u001a\u0002HN\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020O*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002HN¢\u0006\u0002\u0010V\u001a\u0012\u0010ë\u0001\u001a\u00030ì\u0001*\b\u0012\u0004\u0012\u00020\u001b06\u001a\u0012\u0010í\u0001\u001a\u00030î\u0001*\b\u0012\u0004\u0012\u00020\u001f06\u001a)\u0010ï\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020ð\u0001j\t\u0012\u0004\u0012\u0002H\u0002`ñ\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010ò\u0001\u001a\u00030ó\u0001*\b\u0012\u0004\u0012\u00020!06\u001a\u001d\u0010ô\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010õ\u0001\u001a\u00030ö\u0001*\b\u0012\u0004\u0012\u00020#06\u001a\u001d\u0010÷\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020|\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u000206\u001a\u001d\u0010÷\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020|\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010ø\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020ù\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010ú\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u0012\u0010û\u0001\u001a\u00030ü\u0001*\b\u0012\u0004\u0012\u00020%06\u001a6\u0010ý\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020þ\u0001j\t\u0012\u0004\u0012\u0002H\u0002`ÿ\u0001\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020¡\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001aJ\u0010ý\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020þ\u0001j\t\u0012\u0004\u0012\u0002H\u0002`ÿ\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010§\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020¨\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`©\u0001H\u0007\u001a0\u0010\u0080\u0002\u001a\t\u0012\u0004\u0012\u0002H\u00020\u0085\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0086\u0004\u001aC\u0010\u0081\u0002\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(0(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u00020!2\t\b\u0002\u0010\u0082\u0002\u001a\u00020!2\t\b\u0002\u0010\u0083\u0002\u001a\u00020\u0001H\u0007\u001a]\u0010\u0081\u0002\u001a\b\u0012\u0004\u0012\u0002H*0(\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u00020!2\t\b\u0002\u0010\u0082\u0002\u001a\u00020!2\t\b\u0002\u0010\u0083\u0002\u001a\u00020\u00012\u0018\u0010\u000e\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020(\u0012\u0004\u0012\u0002H*0\u0005H\u0007\u001a$\u0010\u0084\u0002\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020\u0085\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aJ\u0010\u0086\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0\u000f0(\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0086\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H*0±\u0001H\u0086\u0004¢\u0006\u0003\u0010²\u0001\u001a~\u0010\u0086\u0002\u001a\b\u0012\u0004\u0012\u0002H\r0(\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010*\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0086\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H*0±\u000128\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bK\u0012\t\bL\u0012\u0005\b\b(\u0087\u0002\u0012\u0014\u0012\u0012H*¢\u0006\r\bK\u0012\t\bL\u0012\u0005\b\b(\u0088\u0002\u0012\u0004\u0012\u0002H\r0JH\u0086\b¢\u0006\u0003\u0010\u0089\u0002\u001aA\u0010\u0086\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H*0\u000f0(\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H*0\u0003H\u0086\u0004\u001au\u0010\u0086\u0002\u001a\b\u0012\u0004\u0012\u0002H\r0(\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010*\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0086\u0001\u001a\b\u0012\u0004\u0012\u0002H*0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bK\u0012\t\bL\u0012\u0005\b\b(\u0087\u0002\u0012\u0014\u0012\u0012H*¢\u0006\r\bK\u0012\t\bL\u0012\u0005\b\b(\u0088\u0002\u0012\u0004\u0012\u0002H\r0JH\u0086\b\u001a+\u0010\u008a\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\u00020\u000f0(\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001a`\u0010\u008a\u0002\u001a\b\u0012\u0004\u0012\u0002H*0(\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010**\b\u0012\u0004\u0012\u0002H\u00020\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bK\u0012\t\bL\u0012\u0005\b\b(\u0087\u0002\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\bK\u0012\t\bL\u0012\u0005\b\b(\u0088\u0002\u0012\u0004\u0012\u0002H*0JH\u0087\b¨\u0006\u008b\u0002"}, d2 = {"all", "", "T", "", "predicate", "Lkotlin/Function1;", "any", "asIterable", "asSequence", "Lkotlin/sequences/Sequence;", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "chunked", "", "size", "R", "component1", "(Ljava/util/List;)Ljava/lang/Object;", "component2", "component3", "component4", "component5", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "count", "", "distinct", "distinctBy", "selector", "drop", "n", "dropLast", "dropLastWhile", "dropWhile", "elementAt", "index", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "(Ljava/util/List;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Ljava/util/List;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "Lkotlin/internal/NoInfer;", "klass", "Ljava/lang/Class;", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "(Ljava/lang/Iterable;Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "first", "(Ljava/lang/Iterable;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "getOrElse", "getOrNull", "groupBy", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "intersect", "", "other", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "elements", "", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "minusElement", SchedulerSupport.NONE, "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", "partition", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "plusElement", "reduce", "S", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "requireNoNulls", "reverse", "reversed", "single", "singleOrNull", "slice", "indices", "Lkotlin/ranges/IntRange;", "sortBy", "sortByDescending", "sortDescending", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "subtract", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeLast", "takeLastWhile", "takeWhile", "toBooleanArray", "", "toByteArray", "", "toCharArray", "", "", "toCollection", "toDoubleArray", "", "toFloatArray", "", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toIntArray", "", "toList", "toLongArray", "", "toMutableList", "toMutableSet", "", "toSet", "toShortArray", "", "toSortedSet", "Ljava/util/SortedSet;", "Lkotlin/collections/SortedSet;", "union", "windowed", "step", "partialWindows", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "a", "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "kotlin-stdlib"}, k = 5, mv = {1, 1, 9}, xi = 1, xs = "kotlin/collections/CollectionsKt")
/* loaded from: classes.dex */
public class CollectionsKt___CollectionsKt extends CollectionsKt__ReversedViewsKt {
    @InlineOnly
    private static final <T> T component1(@NotNull List<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return receiver.get(0);
    }

    @InlineOnly
    private static final <T> T component2(@NotNull List<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return receiver.get(1);
    }

    @InlineOnly
    private static final <T> T component3(@NotNull List<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return receiver.get(2);
    }

    @InlineOnly
    private static final <T> T component4(@NotNull List<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return receiver.get(3);
    }

    @InlineOnly
    private static final <T> T component5(@NotNull List<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return receiver.get(4);
    }

    public static final <T> boolean contains(@NotNull Iterable<? extends T> receiver, T t) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof Collection) {
            return ((Collection) receiver).contains(t);
        }
        return CollectionsKt.indexOf(receiver, t) >= 0;
    }

    public static final <T> T elementAt(@NotNull Iterable<? extends T> receiver, final int i) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof List) {
            return (T) ((List) receiver).get(i);
        }
        return (T) CollectionsKt.elementAtOrElse(receiver, i, new Function1() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$elementAt$1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Object invoke(Object obj) {
                return invoke(((Number) obj).intValue());
            }

            @NotNull
            public final Void invoke(int it) {
                throw new IndexOutOfBoundsException("Collection doesn't contain element at index " + i + '.');
            }
        });
    }

    @InlineOnly
    private static final <T> T elementAt(@NotNull List<? extends T> list, int index) {
        return list.get(index);
    }

    public static final <T> T elementAtOrElse(@NotNull Iterable<? extends T> receiver, int i, @NotNull Function1<? super Integer, ? extends T> defaultValue) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(defaultValue, "defaultValue");
        if (receiver instanceof List) {
            List list = (List) receiver;
            return (i < 0 || i > CollectionsKt.getLastIndex(list)) ? defaultValue.invoke(Integer.valueOf(i)) : (T) list.get(i);
        }
        if (i < 0) {
            return defaultValue.invoke(Integer.valueOf(i));
        }
        int i2 = 0;
        for (T t : receiver) {
            int i3 = i2 + 1;
            if (i != i2) {
                i2 = i3;
            } else {
                return t;
            }
        }
        return defaultValue.invoke(Integer.valueOf(i));
    }

    @InlineOnly
    private static final <T> T elementAtOrElse(@NotNull List<? extends T> list, int index, Function1<? super Integer, ? extends T> function1) {
        return (index < 0 || index > CollectionsKt.getLastIndex(list)) ? function1.invoke(Integer.valueOf(index)) : list.get(index);
    }

    @Nullable
    public static final <T> T elementAtOrNull(@NotNull Iterable<? extends T> receiver, int i) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof List) {
            return (T) CollectionsKt.getOrNull((List) receiver, i);
        }
        if (i < 0) {
            return null;
        }
        int i2 = 0;
        for (T t : receiver) {
            int i3 = i2 + 1;
            if (i != i2) {
                i2 = i3;
            } else {
                return t;
            }
        }
        return null;
    }

    @InlineOnly
    private static final <T> T elementAtOrNull(@NotNull List<? extends T> list, int i) {
        return (T) CollectionsKt.getOrNull(list, i);
    }

    /* JADX WARN: Type inference failed for: r4v2, types: [T, java.lang.Object] */
    @InlineOnly
    private static final <T> T find(@NotNull Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        for (T t : iterable) {
            if (function1.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r5v1, types: [java.lang.Object] */
    @InlineOnly
    private static final <T> T findLast(@NotNull Iterable<? extends T> iterable, Function1<? super T, Boolean> function1) {
        T t = null;
        for (T t2 : iterable) {
            if (function1.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    /* JADX WARN: Type inference failed for: r4v2, types: [T, java.lang.Object] */
    @InlineOnly
    private static final <T> T findLast(@NotNull List<? extends T> list, Function1<? super T, Boolean> function1) {
        ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            ?? r4 = (Object) listIterator.previous();
            if (function1.invoke(r4).booleanValue()) {
                return r4;
            }
        }
        return null;
    }

    public static final <T> T first(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof List) {
            return (T) CollectionsKt.first((List) receiver);
        }
        Iterator<? extends T> it = receiver.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        return it.next();
    }

    public static final <T> T first(@NotNull List<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver.isEmpty()) {
            throw new NoSuchElementException("List is empty.");
        }
        return receiver.get(0);
    }

    /* JADX WARN: Type inference failed for: r2v2, types: [T, java.lang.Object] */
    public static final <T> T first(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (T t : receiver) {
            if (predicate.invoke(t).booleanValue()) {
                return t;
            }
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof List) {
            if (((List) receiver).isEmpty()) {
                return null;
            }
            return (T) ((List) receiver).get(0);
        }
        Iterator<? extends T> it = receiver.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        return null;
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull List<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver.isEmpty()) {
            return null;
        }
        return receiver.get(0);
    }

    /* JADX WARN: Type inference failed for: r2v1, types: [T, java.lang.Object] */
    @Nullable
    public static final <T> T firstOrNull(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (T t : receiver) {
            if (predicate.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    @InlineOnly
    private static final <T> T getOrElse(@NotNull List<? extends T> list, int index, Function1<? super Integer, ? extends T> function1) {
        return (index < 0 || index > CollectionsKt.getLastIndex(list)) ? function1.invoke(Integer.valueOf(index)) : list.get(index);
    }

    @Nullable
    public static final <T> T getOrNull(@NotNull List<? extends T> receiver, int index) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (index < 0 || index > CollectionsKt.getLastIndex(receiver)) {
            return null;
        }
        return receiver.get(index);
    }

    public static final <T> int indexOf(@NotNull Iterable<? extends T> receiver, T t) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof List) {
            return ((List) receiver).indexOf(t);
        }
        int index = 0;
        for (Object item : receiver) {
            if (Intrinsics.areEqual(t, item)) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOf(@NotNull List<? extends T> receiver, T t) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return receiver.indexOf(t);
    }

    public static final <T> int indexOfFirst(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int index = 0;
        for (Object item : receiver) {
            if (predicate.invoke(item).booleanValue()) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(@NotNull List<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int index = 0;
        for (Object item : receiver) {
            if (predicate.invoke(item).booleanValue()) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOfLast(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int lastIndex = -1;
        int index = 0;
        for (Object item : receiver) {
            if (predicate.invoke(item).booleanValue()) {
                lastIndex = index;
            }
            index++;
        }
        return lastIndex;
    }

    public static final <T> int indexOfLast(@NotNull List<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ListIterator<? extends T> listIterator = receiver.listIterator(receiver.size());
        while (listIterator.hasPrevious()) {
            if (predicate.invoke((Object) listIterator.previous()).booleanValue()) {
                return listIterator.nextIndex();
            }
        }
        return -1;
    }

    public static final <T> T last(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof List) {
            return (T) CollectionsKt.last((List) receiver);
        }
        Iterator<? extends T> it = receiver.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        T next = it.next();
        while (it.hasNext()) {
            next = it.next();
        }
        return next;
    }

    public static final <T> T last(@NotNull List<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver.isEmpty()) {
            throw new NoSuchElementException("List is empty.");
        }
        return receiver.get(CollectionsKt.getLastIndex(receiver));
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r4v2, types: [java.lang.Object] */
    public static final <T> T last(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : receiver) {
            if (predicate.invoke(t2).booleanValue()) {
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    /* JADX WARN: Type inference failed for: r2v3, types: [T, java.lang.Object] */
    public static final <T> T last(@NotNull List<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ListIterator<? extends T> listIterator = receiver.listIterator(receiver.size());
        while (listIterator.hasPrevious()) {
            ?? r2 = (Object) listIterator.previous();
            if (predicate.invoke(r2).booleanValue()) {
                return r2;
            }
        }
        throw new NoSuchElementException("List contains no element matching the predicate.");
    }

    public static final <T> int lastIndexOf(@NotNull Iterable<? extends T> receiver, T t) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof List) {
            return ((List) receiver).lastIndexOf(t);
        }
        int lastIndex = -1;
        int index = 0;
        for (Object item : receiver) {
            if (Intrinsics.areEqual(t, item)) {
                lastIndex = index;
            }
            index++;
        }
        return lastIndex;
    }

    public static final <T> int lastIndexOf(@NotNull List<? extends T> receiver, T t) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return receiver.lastIndexOf(t);
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof List) {
            if (((List) receiver).isEmpty()) {
                return null;
            }
            return (T) ((List) receiver).get(((List) receiver).size() - 1);
        }
        Iterator<? extends T> it = receiver.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            next = it.next();
        }
        return next;
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull List<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver.isEmpty()) {
            return null;
        }
        return receiver.get(receiver.size() - 1);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r3v1, types: [java.lang.Object] */
    @Nullable
    public static final <T> T lastOrNull(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T t = null;
        for (T t2 : receiver) {
            if (predicate.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    /* JADX WARN: Type inference failed for: r2v2, types: [T, java.lang.Object] */
    @Nullable
    public static final <T> T lastOrNull(@NotNull List<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ListIterator<? extends T> listIterator = receiver.listIterator(receiver.size());
        while (listIterator.hasPrevious()) {
            ?? r2 = (Object) listIterator.previous();
            if (predicate.invoke(r2).booleanValue()) {
                return r2;
            }
        }
        return null;
    }

    public static final <T> T single(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof List) {
            return (T) CollectionsKt.single((List) receiver);
        }
        Iterator<? extends T> it = receiver.iterator();
        if (!it.hasNext()) {
            throw new NoSuchElementException("Collection is empty.");
        }
        T next = it.next();
        if (it.hasNext()) {
            throw new IllegalArgumentException("Collection has more than one element.");
        }
        return next;
    }

    public static final <T> T single(@NotNull List<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        switch (receiver.size()) {
            case 0:
                throw new NoSuchElementException("List is empty.");
            case 1:
                return receiver.get(0);
            default:
                throw new IllegalArgumentException("List has more than one element.");
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r4v2, types: [java.lang.Object] */
    public static final <T> T single(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : receiver) {
            if (predicate.invoke(t2).booleanValue()) {
                if (z) {
                    throw new IllegalArgumentException("Collection contains more than one matching element.");
                }
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        throw new NoSuchElementException("Collection contains no element matching the predicate.");
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof List) {
            if (((List) receiver).size() == 1) {
                return (T) ((List) receiver).get(0);
            }
            return null;
        }
        Iterator<? extends T> it = receiver.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (it.hasNext()) {
            return null;
        }
        return next;
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull List<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver.size() == 1) {
            return receiver.get(0);
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r4v1, types: [java.lang.Object] */
    @Nullable
    public static final <T> T singleOrNull(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : receiver) {
            if (predicate.invoke(t2).booleanValue()) {
                if (z) {
                    return null;
                }
                t = t2;
                z = true;
            }
        }
        if (z) {
            return t;
        }
        return null;
    }

    @NotNull
    public static final <T> List<T> drop(@NotNull Iterable<? extends T> receiver, int n) {
        ArrayList list;
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        if (n == 0) {
            return CollectionsKt.toList(receiver);
        }
        if (receiver instanceof Collection) {
            int resultSize = ((Collection) receiver).size() - n;
            if (resultSize <= 0) {
                return CollectionsKt.emptyList();
            }
            if (resultSize == 1) {
                return CollectionsKt.listOf(CollectionsKt.last(receiver));
            }
            list = new ArrayList(resultSize);
            if (receiver instanceof List) {
                if (receiver instanceof RandomAccess) {
                    int size = ((List) receiver).size() - 1;
                    if (n <= size) {
                        int index = n;
                        while (true) {
                            list.add(((List) receiver).get(index));
                            if (index == size) {
                                break;
                            }
                            index++;
                        }
                    }
                } else {
                    ListIterator listIterator = ((List) receiver).listIterator(n);
                    while (listIterator.hasNext()) {
                        Object item = listIterator.next();
                        list.add(item);
                    }
                }
                return list;
            }
        } else {
            list = new ArrayList();
        }
        int count = 0;
        for (T t : receiver) {
            int count2 = count + 1;
            if (count >= n) {
                list.add(t);
            }
            count = count2;
        }
        return CollectionsKt.optimizeReadOnlyList(list);
    }

    @NotNull
    public static final <T> List<T> dropLast(@NotNull List<? extends T> receiver, int n) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        return CollectionsKt.take(receiver, RangesKt.coerceAtLeast(receiver.size() - n, 0));
    }

    @NotNull
    public static final <T> List<T> dropLastWhile(@NotNull List<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if (!receiver.isEmpty()) {
            ListIterator<? extends T> listIterator = receiver.listIterator(receiver.size());
            while (listIterator.hasPrevious()) {
                if (!predicate.invoke((Object) listIterator.previous()).booleanValue()) {
                    return CollectionsKt.take(receiver, listIterator.nextIndex() + 1);
                }
            }
        }
        return CollectionsKt.emptyList();
    }

    @NotNull
    public static final <T> List<T> dropWhile(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        boolean yielding = false;
        ArrayList list = new ArrayList();
        for (Object item : receiver) {
            if (yielding) {
                list.add(item);
            } else if (!predicate.invoke(item).booleanValue()) {
                list.add(item);
                yielding = true;
            }
        }
        return list;
    }

    @NotNull
    public static final <T> List<T> filter(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Collection destination$iv = new ArrayList();
        for (Object element$iv : receiver) {
            if (predicate.invoke(element$iv).booleanValue()) {
                destination$iv.add(element$iv);
            }
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T> List<T> filterIndexed(@NotNull Iterable<? extends T> receiver, @NotNull Function2<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Collection destination$iv = new ArrayList();
        int index$iv$iv = 0;
        for (Object item$iv$iv : receiver) {
            int index$iv$iv2 = index$iv$iv + 1;
            if (predicate.invoke(Integer.valueOf(index$iv$iv), item$iv$iv).booleanValue()) {
                destination$iv.add(item$iv$iv);
            }
            index$iv$iv = index$iv$iv2;
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterIndexedTo(@NotNull Iterable<? extends T> receiver, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int index$iv = 0;
        for (Object item$iv : receiver) {
            int index$iv2 = index$iv + 1;
            if (predicate.invoke(Integer.valueOf(index$iv), item$iv).booleanValue()) {
                destination.add(item$iv);
            }
            index$iv = index$iv2;
        }
        return destination;
    }

    private static final <R> List<R> filterIsInstance(@NotNull Iterable<?> iterable) {
        Collection destination$iv = new ArrayList();
        for (Object element$iv : iterable) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (element$iv instanceof Object) {
                destination$iv.add(element$iv);
            }
        }
        return (List) destination$iv;
    }

    private static final <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull Iterable<?> iterable, C c) {
        for (Object element : iterable) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (element instanceof Object) {
                c.add(element);
            }
        }
        return c;
    }

    @NotNull
    public static final <T> List<T> filterNot(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Collection destination$iv = new ArrayList();
        for (Object element$iv : receiver) {
            if (!predicate.invoke(element$iv).booleanValue()) {
                destination$iv.add(element$iv);
            }
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T> List<T> filterNotNull(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return (List) CollectionsKt.filterNotNullTo(receiver, new ArrayList());
    }

    @NotNull
    public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull Iterable<? extends T> receiver, @NotNull C destination) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        for (T t : receiver) {
            if (t != null) {
                destination.add(t);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull Iterable<? extends T> receiver, @NotNull C destination, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (Object element : receiver) {
            if (!predicate.invoke(element).booleanValue()) {
                destination.add(element);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterTo(@NotNull Iterable<? extends T> receiver, @NotNull C destination, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (Object element : receiver) {
            if (predicate.invoke(element).booleanValue()) {
                destination.add(element);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T> List<T> slice(@NotNull List<? extends T> receiver, @NotNull IntRange indices) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(indices, "indices");
        return indices.isEmpty() ? CollectionsKt.emptyList() : CollectionsKt.toList(receiver.subList(indices.getStart().intValue(), indices.getEndInclusive().intValue() + 1));
    }

    @NotNull
    public static final <T> List<T> slice(@NotNull List<? extends T> receiver, @NotNull Iterable<Integer> indices) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(indices, "indices");
        int size = CollectionsKt.collectionSizeOrDefault(indices, 10);
        if (size == 0) {
            return CollectionsKt.emptyList();
        }
        ArrayList list = new ArrayList(size);
        Iterator<Integer> it = indices.iterator();
        while (it.hasNext()) {
            int index = it.next().intValue();
            list.add(receiver.get(index));
        }
        return list;
    }

    @NotNull
    public static final <T> List<T> take(@NotNull Iterable<? extends T> receiver, int n) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        if (n == 0) {
            return CollectionsKt.emptyList();
        }
        if (receiver instanceof Collection) {
            if (n >= ((Collection) receiver).size()) {
                return CollectionsKt.toList(receiver);
            }
            if (n == 1) {
                return CollectionsKt.listOf(CollectionsKt.first(receiver));
            }
        }
        int count = 0;
        ArrayList list = new ArrayList(n);
        for (T t : receiver) {
            int count2 = count + 1;
            if (count == n) {
                break;
            }
            list.add(t);
            count = count2;
        }
        return CollectionsKt.optimizeReadOnlyList(list);
    }

    @NotNull
    public static final <T> List<T> takeLast(@NotNull List<? extends T> receiver, int n) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (!(n >= 0)) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        }
        if (n == 0) {
            return CollectionsKt.emptyList();
        }
        int size = receiver.size();
        if (n >= size) {
            return CollectionsKt.toList(receiver);
        }
        if (n == 1) {
            return CollectionsKt.listOf(CollectionsKt.last((List) receiver));
        }
        ArrayList list = new ArrayList(n);
        if (receiver instanceof RandomAccess) {
            int index = size - n;
            int i = size - 1;
            if (index <= i) {
                while (true) {
                    list.add(receiver.get(index));
                    if (index == i) {
                        break;
                    }
                    index++;
                }
            }
        } else {
            ListIterator<? extends T> listIterator = receiver.listIterator(size - n);
            while (listIterator.hasNext()) {
                list.add(listIterator.next());
            }
        }
        return list;
    }

    @NotNull
    public static final <T> List<T> takeLastWhile(@NotNull List<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if (receiver.isEmpty()) {
            return CollectionsKt.emptyList();
        }
        ListIterator<? extends T> listIterator = receiver.listIterator(receiver.size());
        while (listIterator.hasPrevious()) {
            if (!predicate.invoke((Object) listIterator.previous()).booleanValue()) {
                listIterator.next();
                int size = receiver.size() - listIterator.nextIndex();
                if (size == 0) {
                    return CollectionsKt.emptyList();
                }
                ArrayList arrayList = new ArrayList(size);
                while (listIterator.hasNext()) {
                    arrayList.add(listIterator.next());
                }
                return arrayList;
            }
        }
        return CollectionsKt.toList(receiver);
    }

    @NotNull
    public static final <T> List<T> takeWhile(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ArrayList list = new ArrayList();
        for (Object item : receiver) {
            if (!predicate.invoke(item).booleanValue()) {
                break;
            }
            list.add(item);
        }
        return list;
    }

    public static final <T> void reverse(@NotNull List<T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Collections.reverse(receiver);
    }

    @NotNull
    public static final <T> List<T> reversed(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if ((receiver instanceof Collection) && ((Collection) receiver).size() <= 1) {
            return CollectionsKt.toList(receiver);
        }
        List list = CollectionsKt.toMutableList(receiver);
        CollectionsKt.reverse(list);
        return list;
    }

    public static final <T, R extends Comparable<? super R>> void sortBy(@NotNull List<T> receiver, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        if (receiver.size() > 1) {
            CollectionsKt.sortWith(receiver, new ComparisonsKt__ComparisonsKt$compareBy$2(selector));
        }
    }

    public static final <T, R extends Comparable<? super R>> void sortByDescending(@NotNull List<T> receiver, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        if (receiver.size() > 1) {
            CollectionsKt.sortWith(receiver, new ComparisonsKt__ComparisonsKt$compareByDescending$1(selector));
        }
    }

    public static final <T extends Comparable<? super T>> void sortDescending(@NotNull List<T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        CollectionsKt.sortWith(receiver, ComparisonsKt.reverseOrder());
    }

    @NotNull
    public static final <T extends Comparable<? super T>> List<T> sorted(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (!(receiver instanceof Collection)) {
            List $receiver = CollectionsKt.toMutableList(receiver);
            CollectionsKt.sort($receiver);
            return $receiver;
        }
        if (((Collection) receiver).size() <= 1) {
            return CollectionsKt.toList(receiver);
        }
        Collection $receiver$iv = (Collection) receiver;
        Object[] array = $receiver$iv.toArray(new Comparable[0]);
        if (array == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        if (array == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        Comparable[] $receiver2 = (Comparable[]) array;
        if ($receiver2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");
        }
        ArraysKt.sort((Object[]) $receiver2);
        return ArraysKt.asList($receiver2);
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> List<T> sortedBy(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return CollectionsKt.sortedWith(receiver, new ComparisonsKt__ComparisonsKt$compareBy$2(selector));
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> List<T> sortedByDescending(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return CollectionsKt.sortedWith(receiver, new ComparisonsKt__ComparisonsKt$compareByDescending$1(selector));
    }

    @NotNull
    public static final <T extends Comparable<? super T>> List<T> sortedDescending(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return CollectionsKt.sortedWith(receiver, ComparisonsKt.reverseOrder());
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T> List<T> sortedWith(@NotNull Iterable<? extends T> receiver, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        if (!(receiver instanceof Collection)) {
            List $receiver = CollectionsKt.toMutableList(receiver);
            CollectionsKt.sortWith($receiver, comparator);
            return $receiver;
        }
        if (((Collection) receiver).size() <= 1) {
            return CollectionsKt.toList(receiver);
        }
        Object[] $receiver2 = ((Collection) receiver).toArray(new Object[0]);
        if ($receiver2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        if ($receiver2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
        }
        ArraysKt.sortWith($receiver2, comparator);
        return ArraysKt.asList($receiver2);
    }

    @NotNull
    public static final boolean[] toBooleanArray(@NotNull Collection<Boolean> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        boolean[] result = new boolean[receiver.size()];
        int index = 0;
        Iterator<Boolean> it = receiver.iterator();
        while (it.hasNext()) {
            boolean element = it.next().booleanValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    @NotNull
    public static final byte[] toByteArray(@NotNull Collection<Byte> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        byte[] result = new byte[receiver.size()];
        int index = 0;
        Iterator<Byte> it = receiver.iterator();
        while (it.hasNext()) {
            byte element = it.next().byteValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    @NotNull
    public static final char[] toCharArray(@NotNull Collection<Character> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        char[] result = new char[receiver.size()];
        int index = 0;
        Iterator<Character> it = receiver.iterator();
        while (it.hasNext()) {
            char element = it.next().charValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    @NotNull
    public static final double[] toDoubleArray(@NotNull Collection<Double> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        double[] result = new double[receiver.size()];
        int index = 0;
        Iterator<Double> it = receiver.iterator();
        while (it.hasNext()) {
            double element = it.next().doubleValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    @NotNull
    public static final float[] toFloatArray(@NotNull Collection<Float> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        float[] result = new float[receiver.size()];
        int index = 0;
        Iterator<Float> it = receiver.iterator();
        while (it.hasNext()) {
            float element = it.next().floatValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    @NotNull
    public static final int[] toIntArray(@NotNull Collection<Integer> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        int[] result = new int[receiver.size()];
        int index = 0;
        Iterator<Integer> it = receiver.iterator();
        while (it.hasNext()) {
            int element = it.next().intValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    @NotNull
    public static final long[] toLongArray(@NotNull Collection<Long> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        long[] result = new long[receiver.size()];
        int index = 0;
        Iterator<Long> it = receiver.iterator();
        while (it.hasNext()) {
            long element = it.next().longValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    @NotNull
    public static final short[] toShortArray(@NotNull Collection<Short> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        short[] result = new short[receiver.size()];
        int index = 0;
        Iterator<Short> it = receiver.iterator();
        while (it.hasNext()) {
            short element = it.next().shortValue();
            result[index] = element;
            index++;
        }
        return result;
    }

    @NotNull
    public static final <T, K, V> Map<K, V> associate(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int capacity = RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(receiver, 10)), 16);
        Map destination$iv = new LinkedHashMap(capacity);
        for (Object element$iv : receiver) {
            Pair<? extends K, ? extends V> invoke = transform.invoke(element$iv);
            destination$iv.put(invoke.getFirst(), invoke.getSecond());
        }
        return destination$iv;
    }

    @NotNull
    public static final <T, K> Map<K, T> associateBy(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        int capacity = RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(receiver, 10)), 16);
        Map destination$iv = new LinkedHashMap(capacity);
        for (Object element$iv : receiver) {
            destination$iv.put(keySelector.invoke(element$iv), element$iv);
        }
        return destination$iv;
    }

    @NotNull
    public static final <T, K, V> Map<K, V> associateBy(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        int capacity = RangesKt.coerceAtLeast(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(receiver, 10)), 16);
        Map destination$iv = new LinkedHashMap(capacity);
        for (Object element$iv : receiver) {
            destination$iv.put(keySelector.invoke(element$iv), valueTransform.invoke(element$iv));
        }
        return destination$iv;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull Iterable<? extends T> receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        for (Object element : receiver) {
            destination.put(keySelector.invoke(element), element);
        }
        return destination;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull Iterable<? extends T> receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        for (Object element : receiver) {
            destination.put(keySelector.invoke(element), valueTransform.invoke(element));
        }
        return destination;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull Iterable<? extends T> receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (Object element : receiver) {
            Pair<? extends K, ? extends V> invoke = transform.invoke(element);
            destination.put(invoke.getFirst(), invoke.getSecond());
        }
        return destination;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C toCollection(@NotNull Iterable<? extends T> receiver, @NotNull C destination) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Iterator<? extends T> it = receiver.iterator();
        while (it.hasNext()) {
            destination.add(it.next());
        }
        return destination;
    }

    @NotNull
    public static final <T> HashSet<T> toHashSet(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return (HashSet) CollectionsKt.toCollection(receiver, new HashSet(MapsKt.mapCapacity(CollectionsKt.collectionSizeOrDefault(receiver, 12))));
    }

    @NotNull
    public static final <T> List<T> toList(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof Collection) {
            switch (((Collection) receiver).size()) {
                case 0:
                    return CollectionsKt.emptyList();
                case 1:
                    return CollectionsKt.listOf(receiver instanceof List ? ((List) receiver).get(0) : receiver.iterator().next());
                default:
                    return CollectionsKt.toMutableList((Collection) receiver);
            }
        }
        return CollectionsKt.optimizeReadOnlyList(CollectionsKt.toMutableList(receiver));
    }

    @NotNull
    public static final <T> List<T> toMutableList(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof Collection) {
            return CollectionsKt.toMutableList((Collection) receiver);
        }
        return (List) CollectionsKt.toCollection(receiver, new ArrayList());
    }

    @NotNull
    public static final <T> List<T> toMutableList(@NotNull Collection<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return new ArrayList(receiver);
    }

    @NotNull
    public static final <T> Set<T> toSet(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof Collection) {
            switch (((Collection) receiver).size()) {
                case 0:
                    return SetsKt.emptySet();
                case 1:
                    return SetsKt.setOf(receiver instanceof List ? ((List) receiver).get(0) : receiver.iterator().next());
                default:
                    return (Set) CollectionsKt.toCollection(receiver, new LinkedHashSet(MapsKt.mapCapacity(((Collection) receiver).size())));
            }
        }
        return SetsKt.optimizeReadOnlySet((Set) CollectionsKt.toCollection(receiver, new LinkedHashSet()));
    }

    @NotNull
    public static final <T extends Comparable<? super T>> SortedSet<T> toSortedSet(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return (SortedSet) CollectionsKt.toCollection(receiver, new TreeSet());
    }

    @NotNull
    public static final <T> SortedSet<T> toSortedSet(@NotNull Iterable<? extends T> receiver, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        return (SortedSet) CollectionsKt.toCollection(receiver, new TreeSet(comparator));
    }

    @NotNull
    public static final <T, R> List<R> flatMap(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Collection destination$iv = new ArrayList();
        for (Object element$iv : receiver) {
            Iterable list$iv = transform.invoke(element$iv);
            CollectionsKt.addAll(destination$iv, list$iv);
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull Iterable<? extends T> receiver, @NotNull C destination, @NotNull Function1<? super T, ? extends Iterable<? extends R>> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (Object element : receiver) {
            Iterable list = transform.invoke(element);
            CollectionsKt.addAll(destination, list);
        }
        return destination;
    }

    @NotNull
    public static final <T, K> Map<K, List<T>> groupBy(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends K> keySelector) {
        Object answer$iv$iv;
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Map destination$iv = new LinkedHashMap();
        for (Object element$iv : receiver) {
            K invoke = keySelector.invoke(element$iv);
            Object value$iv$iv = destination$iv.get(invoke);
            if (value$iv$iv == null) {
                answer$iv$iv = new ArrayList();
                destination$iv.put(invoke, answer$iv$iv);
            } else {
                answer$iv$iv = value$iv$iv;
            }
            List list$iv = (List) answer$iv$iv;
            list$iv.add(element$iv);
        }
        return destination$iv;
    }

    @NotNull
    public static final <T, K, V> Map<K, List<V>> groupBy(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        List<V> list;
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        for (Object obj : receiver) {
            K invoke = keySelector.invoke(obj);
            List<V> list2 = linkedHashMap.get(invoke);
            if (list2 == null) {
                list = new ArrayList<>();
                linkedHashMap.put(invoke, list);
            } else {
                list = list2;
            }
            list.add(valueTransform.invoke(obj));
        }
        return linkedHashMap;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, List<T>>> M groupByTo(@NotNull Iterable<? extends T> receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector) {
        Object answer$iv;
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        for (Object element : receiver) {
            K invoke = keySelector.invoke(element);
            Object value$iv = destination.get(invoke);
            if (value$iv == null) {
                answer$iv = new ArrayList();
                destination.put(invoke, answer$iv);
            } else {
                answer$iv = value$iv;
            }
            List list = (List) answer$iv;
            list.add(element);
        }
        return destination;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T, K, V, M extends Map<? super K, List<V>>> M groupByTo(@NotNull Iterable<? extends T> receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        Object answer$iv;
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        for (Object element : receiver) {
            K invoke = keySelector.invoke(element);
            Object value$iv = destination.get(invoke);
            if (value$iv == null) {
                answer$iv = new ArrayList();
                destination.put(invoke, answer$iv);
            } else {
                answer$iv = value$iv;
            }
            List list = (List) answer$iv;
            list.add(valueTransform.invoke(element));
        }
        return destination;
    }

    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T, K> Grouping<T, K> groupingBy(@NotNull final Iterable<? extends T> receiver, @NotNull final Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        return new Grouping<T, K>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$groupingBy$1
            @Override // kotlin.collections.Grouping
            @NotNull
            public Iterator<T> sourceIterator() {
                return receiver.iterator();
            }

            @Override // kotlin.collections.Grouping
            public K keyOf(T element) {
                return (K) keySelector.invoke(element);
            }
        };
    }

    @NotNull
    public static final <T, R> List<R> map(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Collection destination$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault(receiver, 10));
        for (Object item$iv : receiver) {
            destination$iv.add(transform.invoke(item$iv));
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T, R> List<R> mapIndexed(@NotNull Iterable<? extends T> receiver, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Collection destination$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault(receiver, 10));
        int index$iv = 0;
        for (Object item$iv : receiver) {
            Integer valueOf = Integer.valueOf(index$iv);
            index$iv++;
            destination$iv.add(transform.invoke(valueOf, item$iv));
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T, R> List<R> mapIndexedNotNull(@NotNull Iterable<? extends T> receiver, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Collection destination$iv = new ArrayList();
        int index$iv = 0;
        for (Object item$iv$iv : receiver) {
            int index$iv$iv = index$iv + 1;
            R invoke = transform.invoke(Integer.valueOf(index$iv), item$iv$iv);
            if (invoke != null) {
                destination$iv.add(invoke);
            }
            index$iv = index$iv$iv;
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedNotNullTo(@NotNull Iterable<? extends T> receiver, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int index = 0;
        for (Object item$iv : receiver) {
            int index$iv = index + 1;
            R invoke = transform.invoke(Integer.valueOf(index), item$iv);
            if (invoke != null) {
                destination.add(invoke);
            }
            index = index$iv;
        }
        return destination;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull Iterable<? extends T> receiver, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int index = 0;
        for (Object item : receiver) {
            Integer valueOf = Integer.valueOf(index);
            index++;
            destination.add(transform.invoke(valueOf, item));
        }
        return destination;
    }

    @NotNull
    public static final <T, R> List<R> mapNotNull(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Collection destination$iv = new ArrayList();
        for (Object element$iv$iv : receiver) {
            R invoke = transform.invoke(element$iv$iv);
            if (invoke != null) {
                destination$iv.add(invoke);
            }
        }
        return (List) destination$iv;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapNotNullTo(@NotNull Iterable<? extends T> receiver, @NotNull C destination, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (Object element$iv : receiver) {
            R invoke = transform.invoke(element$iv);
            if (invoke != null) {
                destination.add(invoke);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull Iterable<? extends T> receiver, @NotNull C destination, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (Object item : receiver) {
            destination.add(transform.invoke(item));
        }
        return destination;
    }

    @NotNull
    public static final <T> Iterable<IndexedValue<T>> withIndex(@NotNull final Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return new IndexingIterable(new Function0<Iterator<? extends T>>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$withIndex$1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(0);
            }

            @Override // kotlin.jvm.functions.Function0
            @NotNull
            public final Iterator<T> invoke() {
                return receiver.iterator();
            }
        });
    }

    @NotNull
    public static final <T> List<T> distinct(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return CollectionsKt.toList(CollectionsKt.toMutableSet(receiver));
    }

    @NotNull
    public static final <T, K> List<T> distinctBy(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends K> selector) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        HashSet set = new HashSet();
        ArrayList list = new ArrayList();
        for (Object e : receiver) {
            if (set.add(selector.invoke(e))) {
                list.add(e);
            }
        }
        return list;
    }

    @NotNull
    public static final <T> Set<T> intersect(@NotNull Iterable<? extends T> receiver, @NotNull Iterable<? extends T> other) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Set set = CollectionsKt.toMutableSet(receiver);
        CollectionsKt.retainAll(set, other);
        return set;
    }

    @NotNull
    public static final <T> Set<T> subtract(@NotNull Iterable<? extends T> receiver, @NotNull Iterable<? extends T> other) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Set set = CollectionsKt.toMutableSet(receiver);
        CollectionsKt.removeAll(set, other);
        return set;
    }

    @NotNull
    public static final <T> Set<T> toMutableSet(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return receiver instanceof Collection ? new LinkedHashSet((Collection) receiver) : (Set) CollectionsKt.toCollection(receiver, new LinkedHashSet());
    }

    @NotNull
    public static final <T> Set<T> union(@NotNull Iterable<? extends T> receiver, @NotNull Iterable<? extends T> other) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Set set = CollectionsKt.toMutableSet(receiver);
        CollectionsKt.addAll(set, other);
        return set;
    }

    public static final <T> boolean all(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ((receiver instanceof Collection) && ((Collection) receiver).isEmpty()) {
            return true;
        }
        for (Object element : receiver) {
            if (!predicate.invoke(element).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean any(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return receiver instanceof Collection ? !((Collection) receiver).isEmpty() : receiver.iterator().hasNext();
    }

    public static final <T> boolean any(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ((receiver instanceof Collection) && ((Collection) receiver).isEmpty()) {
            return false;
        }
        for (Object element : receiver) {
            if (predicate.invoke(element).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    public static final <T> int count(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof Collection) {
            return ((Collection) receiver).size();
        }
        int count = 0;
        Iterator<? extends T> it = receiver.iterator();
        while (it.hasNext()) {
            it.next();
            count++;
        }
        return count;
    }

    @InlineOnly
    private static final <T> int count(@NotNull Collection<? extends T> collection) {
        return collection.size();
    }

    public static final <T> int count(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ((receiver instanceof Collection) && ((Collection) receiver).isEmpty()) {
            return 0;
        }
        int count = 0;
        for (Object element : receiver) {
            if (predicate.invoke(element).booleanValue()) {
                count++;
            }
        }
        return count;
    }

    public static final <T, R> R fold(@NotNull Iterable<? extends T> receiver, R r, @NotNull Function2<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        R r2 = r;
        Iterator<? extends T> it = receiver.iterator();
        while (it.hasNext()) {
            r2 = operation.invoke(r2, it.next());
        }
        return r2;
    }

    public static final <T, R> R foldIndexed(@NotNull Iterable<? extends T> receiver, R r, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        int i = 0;
        R r2 = r;
        for (Object obj : receiver) {
            Integer valueOf = Integer.valueOf(i);
            i++;
            r2 = operation.invoke(valueOf, r2, obj);
        }
        return r2;
    }

    public static final <T, R> R foldRight(@NotNull List<? extends T> receiver, R r, @NotNull Function2<? super T, ? super R, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        R r2 = r;
        if (!receiver.isEmpty()) {
            ListIterator<? extends T> listIterator = receiver.listIterator(receiver.size());
            while (listIterator.hasPrevious()) {
                r2 = operation.invoke((Object) listIterator.previous(), r2);
            }
        }
        return r2;
    }

    public static final <T, R> R foldRightIndexed(@NotNull List<? extends T> receiver, R r, @NotNull Function3<? super Integer, ? super T, ? super R, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        R r2 = r;
        if (!receiver.isEmpty()) {
            ListIterator<? extends T> listIterator = receiver.listIterator(receiver.size());
            while (listIterator.hasPrevious()) {
                r2 = operation.invoke(Integer.valueOf(listIterator.previousIndex()), (Object) listIterator.previous(), r2);
            }
        }
        return r2;
    }

    @HidesMembers
    public static final <T> void forEach(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(action, "action");
        for (Object element : receiver) {
            action.invoke(element);
        }
    }

    public static final <T> void forEachIndexed(@NotNull Iterable<? extends T> receiver, @NotNull Function2<? super Integer, ? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(action, "action");
        int index = 0;
        for (Object item : receiver) {
            Integer valueOf = Integer.valueOf(index);
            index++;
            action.invoke(valueOf, item);
        }
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: max, reason: collision with other method in class */
    public static final Double m9max(@NotNull Iterable<Double> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Iterator iterator = receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double max = iterator.next().doubleValue();
        if (Double.isNaN(max)) {
            return Double.valueOf(max);
        }
        while (iterator.hasNext()) {
            double e = iterator.next().doubleValue();
            if (Double.isNaN(e)) {
                return Double.valueOf(e);
            }
            if (max < e) {
                max = e;
            }
        }
        return Double.valueOf(max);
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: max, reason: collision with other method in class */
    public static final Float m10max(@NotNull Iterable<Float> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Iterator iterator = receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float max = iterator.next().floatValue();
        if (Float.isNaN(max)) {
            return Float.valueOf(max);
        }
        while (iterator.hasNext()) {
            float e = iterator.next().floatValue();
            if (Float.isNaN(e)) {
                return Float.valueOf(e);
            }
            if (max < e) {
                max = e;
            }
        }
        return Float.valueOf(max);
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T max(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Iterator iterator = receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T next = iterator.next();
        while (iterator.hasNext()) {
            T next2 = iterator.next();
            if (next.compareTo(next2) < 0) {
                next = next2;
            }
        }
        return next;
    }

    @Nullable
    public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        Iterator<? extends T> it = receiver.iterator();
        if (!it.hasNext()) {
            return null;
        }
        Object obj = (Object) it.next();
        R invoke = selector.invoke(obj);
        while (it.hasNext()) {
            Object next = it.next();
            R invoke2 = selector.invoke(next);
            if (invoke.compareTo(invoke2) < 0) {
                obj = (T) next;
                invoke = invoke2;
            }
        }
        return (T) obj;
    }

    @Nullable
    public static final <T> T maxWith(@NotNull Iterable<? extends T> receiver, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        Iterator<? extends T> it = receiver.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            Object next2 = it.next();
            if (comparator.compare(next, next2) < 0) {
                next = (T) next2;
            }
        }
        return next;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: min, reason: collision with other method in class */
    public static final Double m11min(@NotNull Iterable<Double> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Iterator iterator = receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double min = iterator.next().doubleValue();
        if (Double.isNaN(min)) {
            return Double.valueOf(min);
        }
        while (iterator.hasNext()) {
            double e = iterator.next().doubleValue();
            if (Double.isNaN(e)) {
                return Double.valueOf(e);
            }
            if (min > e) {
                min = e;
            }
        }
        return Double.valueOf(min);
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    /* renamed from: min, reason: collision with other method in class */
    public static final Float m12min(@NotNull Iterable<Float> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Iterator iterator = receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float min = iterator.next().floatValue();
        if (Float.isNaN(min)) {
            return Float.valueOf(min);
        }
        while (iterator.hasNext()) {
            float e = iterator.next().floatValue();
            if (Float.isNaN(e)) {
                return Float.valueOf(e);
            }
            if (min > e) {
                min = e;
            }
        }
        return Float.valueOf(min);
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T min(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Iterator iterator = receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T next = iterator.next();
        while (iterator.hasNext()) {
            T next2 = iterator.next();
            if (next.compareTo(next2) > 0) {
                next = next2;
            }
        }
        return next;
    }

    @Nullable
    public static final <T, R extends Comparable<? super R>> T minBy(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        Iterator<? extends T> it = receiver.iterator();
        if (!it.hasNext()) {
            return null;
        }
        Object obj = (Object) it.next();
        R invoke = selector.invoke(obj);
        while (it.hasNext()) {
            Object next = it.next();
            R invoke2 = selector.invoke(next);
            if (invoke.compareTo(invoke2) > 0) {
                obj = (T) next;
                invoke = invoke2;
            }
        }
        return (T) obj;
    }

    @Nullable
    public static final <T> T minWith(@NotNull Iterable<? extends T> receiver, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        Iterator<? extends T> it = receiver.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            Object next2 = it.next();
            if (comparator.compare(next, next2) > 0) {
                next = (T) next2;
            }
        }
        return next;
    }

    public static final <T> boolean none(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return receiver instanceof Collection ? ((Collection) receiver).isEmpty() : !receiver.iterator().hasNext();
    }

    public static final <T> boolean none(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        if ((receiver instanceof Collection) && ((Collection) receiver).isEmpty()) {
            return true;
        }
        for (Object element : receiver) {
            if (predicate.invoke(element).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @SinceKotlin(version = "1.1")
    @NotNull
    public static final <T, C extends Iterable<? extends T>> C onEach(@NotNull C receiver, @NotNull Function1<? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(action, "action");
        for (Object element : receiver) {
            action.invoke(element);
        }
        return receiver;
    }

    public static final <S, T extends S> S reduce(@NotNull Iterable<? extends T> receiver, @NotNull Function2<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Iterator<? extends T> it = receiver.iterator();
        if (!it.hasNext()) {
            throw new UnsupportedOperationException("Empty collection can't be reduced.");
        }
        S s = (S) it.next();
        while (it.hasNext()) {
            s = operation.invoke(s, (Object) it.next());
        }
        return s;
    }

    public static final <S, T extends S> S reduceIndexed(@NotNull Iterable<? extends T> receiver, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Iterator<? extends T> it = receiver.iterator();
        if (!it.hasNext()) {
            throw new UnsupportedOperationException("Empty collection can't be reduced.");
        }
        int i = 1;
        S s = (S) it.next();
        while (it.hasNext()) {
            Integer valueOf = Integer.valueOf(i);
            i++;
            s = operation.invoke(valueOf, s, (Object) it.next());
        }
        return s;
    }

    public static final <S, T extends S> S reduceRight(@NotNull List<? extends T> receiver, @NotNull Function2<? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        ListIterator<? extends T> listIterator = receiver.listIterator(receiver.size());
        if (!listIterator.hasPrevious()) {
            throw new UnsupportedOperationException("Empty list can't be reduced.");
        }
        S s = (S) listIterator.previous();
        while (listIterator.hasPrevious()) {
            s = operation.invoke((Object) listIterator.previous(), s);
        }
        return s;
    }

    public static final <S, T extends S> S reduceRightIndexed(@NotNull List<? extends T> receiver, @NotNull Function3<? super Integer, ? super T, ? super S, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        ListIterator<? extends T> listIterator = receiver.listIterator(receiver.size());
        if (!listIterator.hasPrevious()) {
            throw new UnsupportedOperationException("Empty list can't be reduced.");
        }
        S s = (S) listIterator.previous();
        while (listIterator.hasPrevious()) {
            s = operation.invoke(Integer.valueOf(listIterator.previousIndex()), (Object) listIterator.previous(), s);
        }
        return s;
    }

    public static final <T> int sumBy(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Integer> selector) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        int sum = 0;
        for (Object element : receiver) {
            sum += selector.invoke(element).intValue();
        }
        return sum;
    }

    public static final <T> double sumByDouble(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Double> selector) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        double sum = 0.0d;
        for (Object element : receiver) {
            sum += selector.invoke(element).doubleValue();
        }
        return sum;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T> Iterable<T> requireNoNulls(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        for (Object element : receiver) {
            if (element == null) {
                throw new IllegalArgumentException("null element found in " + receiver + '.');
            }
        }
        return receiver;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @NotNull
    public static final <T> List<T> requireNoNulls(@NotNull List<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        for (Object element : receiver) {
            if (element == null) {
                throw new IllegalArgumentException("null element found in " + receiver + '.');
            }
        }
        return receiver;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> List<List<T>> chunked(@NotNull Iterable<? extends T> receiver, int size) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return CollectionsKt.windowed(receiver, size, size, true);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> List<R> chunked(@NotNull Iterable<? extends T> receiver, int size, @NotNull Function1<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return CollectionsKt.windowed(receiver, size, size, true, transform);
    }

    @NotNull
    public static final <T> List<T> minus(@NotNull Iterable<? extends T> receiver, T t) {
        boolean z;
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        ArrayList result = new ArrayList(CollectionsKt.collectionSizeOrDefault(receiver, 10));
        boolean removed = false;
        for (T t2 : receiver) {
            if (removed || !Intrinsics.areEqual(t2, t)) {
                z = true;
            } else {
                removed = true;
                z = false;
            }
            if (z) {
                result.add(t2);
            }
        }
        return result;
    }

    @NotNull
    public static final <T> List<T> minus(@NotNull Iterable<? extends T> receiver, @NotNull T[] elements) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (elements.length == 0) {
            return CollectionsKt.toList(receiver);
        }
        HashSet other = ArraysKt.toHashSet(elements);
        Collection destination$iv$iv = new ArrayList();
        for (T t : receiver) {
            if (!other.contains(t)) {
                destination$iv$iv.add(t);
            }
        }
        return (List) destination$iv$iv;
    }

    @NotNull
    public static final <T> List<T> minus(@NotNull Iterable<? extends T> receiver, @NotNull Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        Collection other = CollectionsKt.convertToSetForSetOperationWith(elements, receiver);
        if (other.isEmpty()) {
            return CollectionsKt.toList(receiver);
        }
        Collection destination$iv$iv = new ArrayList();
        for (T t : receiver) {
            if (!other.contains(t)) {
                destination$iv$iv.add(t);
            }
        }
        return (List) destination$iv$iv;
    }

    @NotNull
    public static final <T> List<T> minus(@NotNull Iterable<? extends T> receiver, @NotNull Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        HashSet other = SequencesKt.toHashSet(elements);
        if (other.isEmpty()) {
            return CollectionsKt.toList(receiver);
        }
        Collection destination$iv$iv = new ArrayList();
        for (T t : receiver) {
            if (!other.contains(t)) {
                destination$iv$iv.add(t);
            }
        }
        return (List) destination$iv$iv;
    }

    @InlineOnly
    private static final <T> List<T> minusElement(@NotNull Iterable<? extends T> iterable, T t) {
        return CollectionsKt.minus(iterable, t);
    }

    @NotNull
    public static final <T> Pair<List<T>, List<T>> partition(@NotNull Iterable<? extends T> receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ArrayList first = new ArrayList();
        ArrayList second = new ArrayList();
        for (Object element : receiver) {
            if (predicate.invoke(element).booleanValue()) {
                first.add(element);
            } else {
                second.add(element);
            }
        }
        return new Pair<>(first, second);
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Iterable<? extends T> receiver, T t) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        if (receiver instanceof Collection) {
            return CollectionsKt.plus((Collection) receiver, (Object) t);
        }
        ArrayList result = new ArrayList();
        CollectionsKt.addAll(result, receiver);
        result.add(t);
        return result;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Collection<? extends T> receiver, T t) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        ArrayList result = new ArrayList(receiver.size() + 1);
        result.addAll(receiver);
        result.add(t);
        return result;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Iterable<? extends T> receiver, @NotNull T[] elements) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (receiver instanceof Collection) {
            return CollectionsKt.plus((Collection) receiver, (Object[]) elements);
        }
        ArrayList result = new ArrayList();
        CollectionsKt.addAll(result, receiver);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Collection<? extends T> receiver, @NotNull T[] elements) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        ArrayList result = new ArrayList(receiver.size() + elements.length);
        result.addAll(receiver);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Iterable<? extends T> receiver, @NotNull Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (receiver instanceof Collection) {
            return CollectionsKt.plus((Collection) receiver, (Iterable) elements);
        }
        ArrayList result = new ArrayList();
        CollectionsKt.addAll(result, receiver);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Collection<? extends T> receiver, @NotNull Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        if (elements instanceof Collection) {
            ArrayList result = new ArrayList(receiver.size() + ((Collection) elements).size());
            result.addAll(receiver);
            result.addAll((Collection) elements);
            return result;
        }
        ArrayList result2 = new ArrayList(receiver);
        CollectionsKt.addAll(result2, elements);
        return result2;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Iterable<? extends T> receiver, @NotNull Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        ArrayList result = new ArrayList();
        CollectionsKt.addAll(result, receiver);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    @NotNull
    public static final <T> List<T> plus(@NotNull Collection<? extends T> receiver, @NotNull Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        ArrayList result = new ArrayList(receiver.size() + 10);
        result.addAll(receiver);
        CollectionsKt.addAll(result, elements);
        return result;
    }

    @InlineOnly
    private static final <T> List<T> plusElement(@NotNull Iterable<? extends T> iterable, T t) {
        return CollectionsKt.plus(iterable, t);
    }

    @InlineOnly
    private static final <T> List<T> plusElement(@NotNull Collection<? extends T> collection, T t) {
        return CollectionsKt.plus((Collection) collection, (Object) t);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static /* bridge */ /* synthetic */ List windowed$default(Iterable iterable, int i, int i2, boolean z, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return CollectionsKt.windowed(iterable, i, i2, z);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> List<List<T>> windowed(@NotNull Iterable<? extends T> receiver, int size, int step, boolean partialWindows) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        SlidingWindowKt.checkWindowSizeStep(size, step);
        if (!(receiver instanceof RandomAccess) || !(receiver instanceof List)) {
            ArrayList result = new ArrayList();
            Iterator $receiver$iv = SlidingWindowKt.windowedIterator(receiver.iterator(), size, step, partialWindows, false);
            while ($receiver$iv.hasNext()) {
                Object element$iv = $receiver$iv.next();
                List it = (List) element$iv;
                result.add(it);
            }
            return result;
        }
        int thisSize = ((List) receiver).size();
        ArrayList result2 = new ArrayList(((thisSize + step) - 1) / step);
        int index = 0;
        int $i$a$1$List = 0;
        while (index < thisSize) {
            int windowSize = RangesKt.coerceAtMost(size, thisSize - index);
            if (windowSize < size && !partialWindows) {
                break;
            }
            ArrayList arrayList = new ArrayList(windowSize);
            int i = windowSize - 1;
            if (i >= 0) {
                int i2 = $i$a$1$List;
                int $i$a$1$List2 = 0;
                while (true) {
                    int it2 = $i$a$1$List2;
                    arrayList.add(((List) receiver).get(it2 + index));
                    if ($i$a$1$List2 == i) {
                        break;
                    }
                    $i$a$1$List2++;
                }
                $i$a$1$List = i2;
            }
            result2.add(arrayList);
            index += step;
        }
        return result2;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static /* bridge */ /* synthetic */ List windowed$default(Iterable iterable, int i, int i2, boolean z, Function1 function1, int i3, Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return CollectionsKt.windowed(iterable, i, i2, z, function1);
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> List<R> windowed(@NotNull Iterable<? extends T> receiver, int size, int step, boolean partialWindows, @NotNull Function1<? super List<? extends T>, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        SlidingWindowKt.checkWindowSizeStep(size, step);
        int index = 0;
        if ((receiver instanceof RandomAccess) && (receiver instanceof List)) {
            int thisSize = ((List) receiver).size();
            ArrayList result = new ArrayList(((thisSize + step) - 1) / step);
            MovingSubList window = new MovingSubList((List) receiver);
            while (index < thisSize) {
                window.move(index, RangesKt.coerceAtMost(index + size, thisSize));
                if (!partialWindows && window.size() < size) {
                    break;
                }
                result.add(transform.invoke(window));
                index += step;
            }
            return result;
        }
        ArrayList result2 = new ArrayList();
        Iterator $receiver$iv = SlidingWindowKt.windowedIterator(receiver.iterator(), size, step, partialWindows, true);
        while ($receiver$iv.hasNext()) {
            Object element$iv = $receiver$iv.next();
            List it = (List) element$iv;
            result2.add(transform.invoke(it));
        }
        return result2;
    }

    @NotNull
    public static final <T, R> List<Pair<T, R>> zip(@NotNull Iterable<? extends T> receiver, @NotNull R[] other) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(other, "other");
        int arraySize$iv = other.length;
        ArrayList list$iv = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(receiver, 10), arraySize$iv));
        int i$iv = 0;
        for (Object element$iv : receiver) {
            if (i$iv >= arraySize$iv) {
                break;
            }
            list$iv.add(TuplesKt.to(element$iv, other[i$iv]));
            i$iv++;
        }
        return list$iv;
    }

    @NotNull
    public static final <T, R, V> List<V> zip(@NotNull Iterable<? extends T> receiver, @NotNull R[] other, @NotNull Function2<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int arraySize = other.length;
        ArrayList list = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(receiver, 10), arraySize));
        int i = 0;
        for (Object element : receiver) {
            if (i >= arraySize) {
                break;
            }
            list.add(transform.invoke(element, other[i]));
            i++;
        }
        return list;
    }

    @NotNull
    public static final <T, R> List<Pair<T, R>> zip(@NotNull Iterable<? extends T> receiver, @NotNull Iterable<? extends R> other) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Iterator first$iv = receiver.iterator();
        Iterator second$iv = other.iterator();
        ArrayList list$iv = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(receiver, 10), CollectionsKt.collectionSizeOrDefault(other, 10)));
        while (first$iv.hasNext() && second$iv.hasNext()) {
            Object t1 = first$iv.next();
            Object t2 = second$iv.next();
            list$iv.add(TuplesKt.to(t1, t2));
        }
        return list$iv;
    }

    @NotNull
    public static final <T, R, V> List<V> zip(@NotNull Iterable<? extends T> receiver, @NotNull Iterable<? extends R> other, @NotNull Function2<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(other, "other");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Iterator<? extends T> it = receiver.iterator();
        Iterator<? extends R> it2 = other.iterator();
        ArrayList arrayList = new ArrayList(Math.min(CollectionsKt.collectionSizeOrDefault(receiver, 10), CollectionsKt.collectionSizeOrDefault(other, 10)));
        while (it.hasNext() && it2.hasNext()) {
            arrayList.add(transform.invoke((Object) it.next(), (Object) it2.next()));
        }
        return arrayList;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T> List<Pair<T, T>> zipWithNext(@NotNull Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Iterator iterator$iv = receiver.iterator();
        if (!iterator$iv.hasNext()) {
            return CollectionsKt.emptyList();
        }
        List result$iv = new ArrayList();
        Object current$iv = iterator$iv.next();
        while (iterator$iv.hasNext()) {
            Object next$iv = iterator$iv.next();
            Object a = current$iv;
            result$iv.add(TuplesKt.to(a, next$iv));
            current$iv = next$iv;
        }
        return result$iv;
    }

    @SinceKotlin(version = "1.2")
    @NotNull
    public static final <T, R> List<R> zipWithNext(@NotNull Iterable<? extends T> receiver, @NotNull Function2<? super T, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Iterator iterator = receiver.iterator();
        if (!iterator.hasNext()) {
            return CollectionsKt.emptyList();
        }
        List result = new ArrayList();
        Object current = iterator.next();
        while (iterator.hasNext()) {
            Object next = iterator.next();
            result.add(transform.invoke(current, next));
            current = next;
        }
        return result;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ Appendable joinTo$default(Iterable iterable, Appendable appendable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Function1 function1, int i2, Object obj) {
        return CollectionsKt.joinTo(iterable, appendable, (i2 & 2) != 0 ? ", " : charSequence, (i2 & 4) != 0 ? "" : charSequence2, (i2 & 8) != 0 ? "" : charSequence3, (i2 & 16) != 0 ? -1 : i, (i2 & 32) != 0 ? "..." : charSequence4, (i2 & 64) != 0 ? (Function1) null : function1);
    }

    @NotNull
    public static final <T, A extends Appendable> A joinTo(@NotNull Iterable<? extends T> receiver, @NotNull A buffer, @NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(buffer, "buffer");
        Intrinsics.checkParameterIsNotNull(separator, "separator");
        Intrinsics.checkParameterIsNotNull(prefix, "prefix");
        Intrinsics.checkParameterIsNotNull(postfix, "postfix");
        Intrinsics.checkParameterIsNotNull(truncated, "truncated");
        buffer.append(prefix);
        int count = 0;
        for (Object element : receiver) {
            count++;
            if (count > 1) {
                buffer.append(separator);
            }
            if (limit >= 0 && count > limit) {
                break;
            }
            StringsKt.appendElement(buffer, element, function1);
        }
        if (limit >= 0 && count > limit) {
            buffer.append(truncated);
        }
        buffer.append(postfix);
        return buffer;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String joinToString$default(Iterable iterable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Function1 function1, int i2, Object obj) {
        if ((i2 & 1) != 0) {
        }
        if ((i2 & 2) != 0) {
        }
        CharSequence charSequence5 = charSequence2;
        if ((i2 & 4) != 0) {
        }
        CharSequence charSequence6 = charSequence3;
        if ((i2 & 8) != 0) {
            i = -1;
        }
        int i3 = i;
        if ((i2 & 16) != 0) {
        }
        CharSequence charSequence7 = charSequence4;
        if ((i2 & 32) != 0) {
            function1 = (Function1) null;
        }
        return CollectionsKt.joinToString(iterable, charSequence, charSequence5, charSequence6, i3, charSequence7, function1);
    }

    @NotNull
    public static final <T> String joinToString(@NotNull Iterable<? extends T> receiver, @NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function1<? super T, ? extends CharSequence> function1) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(separator, "separator");
        Intrinsics.checkParameterIsNotNull(prefix, "prefix");
        Intrinsics.checkParameterIsNotNull(postfix, "postfix");
        Intrinsics.checkParameterIsNotNull(truncated, "truncated");
        String sb = ((StringBuilder) CollectionsKt.joinTo(receiver, new StringBuilder(), separator, prefix, postfix, limit, truncated, function1)).toString();
        Intrinsics.checkExpressionValueIsNotNull(sb, "joinTo(StringBuilder(), …ed, transform).toString()");
        return sb;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @InlineOnly
    private static final <T> Iterable<T> asIterable(@NotNull Iterable<? extends T> iterable) {
        return iterable;
    }

    @NotNull
    public static final <T> Sequence<T> asSequence(@NotNull final Iterable<? extends T> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        return new Sequence<T>() { // from class: kotlin.collections.CollectionsKt___CollectionsKt$asSequence$$inlined$Sequence$1
            @Override // kotlin.sequences.Sequence
            @NotNull
            public Iterator<T> iterator() {
                return receiver.iterator();
            }
        };
    }

    @JvmName(name = "averageOfByte")
    public static final double averageOfByte(@NotNull Iterable<Byte> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        double sum = 0.0d;
        int count = 0;
        Iterator<Byte> it = receiver.iterator();
        while (it.hasNext()) {
            byte element = it.next().byteValue();
            sum += element;
            count++;
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
    }

    @JvmName(name = "averageOfShort")
    public static final double averageOfShort(@NotNull Iterable<Short> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        double sum = 0.0d;
        int count = 0;
        Iterator<Short> it = receiver.iterator();
        while (it.hasNext()) {
            short element = it.next().shortValue();
            sum += element;
            count++;
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
    }

    @JvmName(name = "averageOfInt")
    public static final double averageOfInt(@NotNull Iterable<Integer> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        double sum = 0.0d;
        int count = 0;
        Iterator<Integer> it = receiver.iterator();
        while (it.hasNext()) {
            int element = it.next().intValue();
            sum += element;
            count++;
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
    }

    @JvmName(name = "averageOfLong")
    public static final double averageOfLong(@NotNull Iterable<Long> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        double sum = 0.0d;
        int count = 0;
        Iterator<Long> it = receiver.iterator();
        while (it.hasNext()) {
            long element = it.next().longValue();
            sum += element;
            count++;
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
    }

    @JvmName(name = "averageOfFloat")
    public static final double averageOfFloat(@NotNull Iterable<Float> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        double sum = 0.0d;
        int count = 0;
        Iterator<Float> it = receiver.iterator();
        while (it.hasNext()) {
            float element = it.next().floatValue();
            sum += element;
            count++;
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
    }

    @JvmName(name = "averageOfDouble")
    public static final double averageOfDouble(@NotNull Iterable<Double> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        double sum = 0.0d;
        int count = 0;
        Iterator<Double> it = receiver.iterator();
        while (it.hasNext()) {
            double element = it.next().doubleValue();
            sum += element;
            count++;
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / count;
    }

    @JvmName(name = "sumOfByte")
    public static final int sumOfByte(@NotNull Iterable<Byte> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        int sum = 0;
        Iterator<Byte> it = receiver.iterator();
        while (it.hasNext()) {
            byte element = it.next().byteValue();
            sum += element;
        }
        return sum;
    }

    @JvmName(name = "sumOfShort")
    public static final int sumOfShort(@NotNull Iterable<Short> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        int sum = 0;
        Iterator<Short> it = receiver.iterator();
        while (it.hasNext()) {
            short element = it.next().shortValue();
            sum += element;
        }
        return sum;
    }

    @JvmName(name = "sumOfInt")
    public static final int sumOfInt(@NotNull Iterable<Integer> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        int sum = 0;
        Iterator<Integer> it = receiver.iterator();
        while (it.hasNext()) {
            int element = it.next().intValue();
            sum += element;
        }
        return sum;
    }

    @JvmName(name = "sumOfLong")
    public static final long sumOfLong(@NotNull Iterable<Long> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        long sum = 0;
        Iterator<Long> it = receiver.iterator();
        while (it.hasNext()) {
            long element = it.next().longValue();
            sum += element;
        }
        return sum;
    }

    @JvmName(name = "sumOfFloat")
    public static final float sumOfFloat(@NotNull Iterable<Float> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        float sum = 0.0f;
        Iterator<Float> it = receiver.iterator();
        while (it.hasNext()) {
            float element = it.next().floatValue();
            sum += element;
        }
        return sum;
    }

    @JvmName(name = "sumOfDouble")
    public static final double sumOfDouble(@NotNull Iterable<Double> receiver) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        double sum = 0.0d;
        Iterator<Double> it = receiver.iterator();
        while (it.hasNext()) {
            double element = it.next().doubleValue();
            sum += element;
        }
        return sum;
    }

    @NotNull
    public static final <R> List<R> filterIsInstance(@NotNull Iterable<?> receiver, @NotNull Class<R> klass) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(klass, "klass");
        return (List) CollectionsKt.filterIsInstanceTo(receiver, new ArrayList(), klass);
    }

    @NotNull
    public static final <C extends Collection<? super R>, R> C filterIsInstanceTo(@NotNull Iterable<?> receiver, @NotNull C destination, @NotNull Class<R> klass) {
        Intrinsics.checkParameterIsNotNull(receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, "destination");
        Intrinsics.checkParameterIsNotNull(klass, "klass");
        for (Object element : receiver) {
            if (klass.isInstance(element)) {
                destination.add(element);
            }
        }
        return destination;
    }
}
